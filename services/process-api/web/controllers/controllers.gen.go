// Package process provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package controllers

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
	externalRef2 "github.com/lejenome/lro/pkg/apis/process"
)

const (
	AccessTokenScopes       = "accessToken.Scopes"
	AccessTokenCookieScopes = "accessTokenCookie.Scopes"
	JwtAuthScopes           = "jwtAuth.Scopes"
)

// Process unique ID (UUID)
type JobId externalRef2.JobId

// TriggerProcessJobJSONBody defines parameters for TriggerProcessJob.
type TriggerProcessJobJSONBody externalRef2.TriggerProcessRequest

// TriggerProcessJobJSONRequestBody defines body for TriggerProcessJob for application/json ContentType.
type TriggerProcessJobJSONRequestBody TriggerProcessJobJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List available processes
	// (GET /process)
	ListAvailableProcesses(c *gin.Context)

	// (GET /process/healthz)
	GetProcessHealthz(c *gin.Context)
	// List Jobs
	// (GET /process/jobs)
	ListJobs(c *gin.Context)
	// Trigger Process Job
	// (POST /process/jobs)
	TriggerProcessJob(c *gin.Context)
	// Cancel Process
	// (POST /process/jobs/{jobId}/cancel)
	CancelProcess(c *gin.Context, jobId JobId)
	// Get Process Results
	// (GET /process/jobs/{jobId}/results)
	GetProcessResults(c *gin.Context, jobId JobId)
	// Get Process Status
	// (GET /process/jobs/{jobId}/status)
	GetProcessStatus(c *gin.Context, jobId JobId)

	// (GET /process/metrics)
	GetProcessMetrics(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// ListAvailableProcesses operation middleware
func (siw *ServerInterfaceWrapper) ListAvailableProcesses(c *gin.Context) {

	c.Set(JwtAuthScopes, []string{""})

	c.Set(AccessTokenScopes, []string{""})

	c.Set(AccessTokenCookieScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ListAvailableProcesses(c)
}

// GetProcessHealthz operation middleware
func (siw *ServerInterfaceWrapper) GetProcessHealthz(c *gin.Context) {

	c.Set(JwtAuthScopes, []string{""})

	c.Set(AccessTokenScopes, []string{""})

	c.Set(AccessTokenCookieScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetProcessHealthz(c)
}

// ListJobs operation middleware
func (siw *ServerInterfaceWrapper) ListJobs(c *gin.Context) {

	c.Set(JwtAuthScopes, []string{""})

	c.Set(AccessTokenScopes, []string{""})

	c.Set(AccessTokenCookieScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ListJobs(c)
}

// TriggerProcessJob operation middleware
func (siw *ServerInterfaceWrapper) TriggerProcessJob(c *gin.Context) {

	c.Set(JwtAuthScopes, []string{""})

	c.Set(AccessTokenScopes, []string{""})

	c.Set(AccessTokenCookieScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.TriggerProcessJob(c)
}

// CancelProcess operation middleware
func (siw *ServerInterfaceWrapper) CancelProcess(c *gin.Context) {

	var err error

	// ------------- Path parameter "jobId" -------------
	var jobId JobId

	err = runtime.BindStyledParameter("simple", false, "jobId", c.Param("jobId"), &jobId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter jobId: %s", err)})
		return
	}

	c.Set(JwtAuthScopes, []string{""})

	c.Set(AccessTokenScopes, []string{""})

	c.Set(AccessTokenCookieScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CancelProcess(c, jobId)
}

// GetProcessResults operation middleware
func (siw *ServerInterfaceWrapper) GetProcessResults(c *gin.Context) {

	var err error

	// ------------- Path parameter "jobId" -------------
	var jobId JobId

	err = runtime.BindStyledParameter("simple", false, "jobId", c.Param("jobId"), &jobId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter jobId: %s", err)})
		return
	}

	c.Set(JwtAuthScopes, []string{""})

	c.Set(AccessTokenScopes, []string{""})

	c.Set(AccessTokenCookieScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetProcessResults(c, jobId)
}

// GetProcessStatus operation middleware
func (siw *ServerInterfaceWrapper) GetProcessStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "jobId" -------------
	var jobId JobId

	err = runtime.BindStyledParameter("simple", false, "jobId", c.Param("jobId"), &jobId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter jobId: %s", err)})
		return
	}

	c.Set(JwtAuthScopes, []string{""})

	c.Set(AccessTokenScopes, []string{""})

	c.Set(AccessTokenCookieScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetProcessStatus(c, jobId)
}

// GetProcessMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetProcessMetrics(c *gin.Context) {

	c.Set(JwtAuthScopes, []string{""})

	c.Set(AccessTokenScopes, []string{""})

	c.Set(AccessTokenCookieScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetProcessMetrics(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/process", wrapper.ListAvailableProcesses)

	router.GET(options.BaseURL+"/process/healthz", wrapper.GetProcessHealthz)

	router.GET(options.BaseURL+"/process/jobs", wrapper.ListJobs)

	router.POST(options.BaseURL+"/process/jobs", wrapper.TriggerProcessJob)

	router.POST(options.BaseURL+"/process/jobs/:jobId/cancel", wrapper.CancelProcess)

	router.GET(options.BaseURL+"/process/jobs/:jobId/results", wrapper.GetProcessResults)

	router.GET(options.BaseURL+"/process/jobs/:jobId/status", wrapper.GetProcessStatus)

	router.GET(options.BaseURL+"/process/metrics", wrapper.GetProcessMetrics)

	return router
}
