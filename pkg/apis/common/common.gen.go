// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package common

import (
	"encoding/json"
	"fmt"
)

// Error defines model for Error.
type Error struct {
	// An application-specific error code, unique for this type of error.
	Code   *uint   `json:"code,omitempty"`
	Detail *string `json:"detail,omitempty"`

	// A unique identifier for this particular occurrence of the problem.
	Id *uint `json:"id,omitempty"`

	// Non-standard meta-information that can not be represented as an attribute or relationship.
	Meta   *Error_Meta `json:"meta,omitempty"`
	Source *struct {
		// A string indicating which query parameter caused the error.
		Parameter *string `json:"parameter,omitempty"`

		// A [JSON Pointer](https://tools.ietf.org/html/rfc6901) to the associated entity in the request document [e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute.
		Pointer *string `json:"pointer,omitempty"`
	} `json:"source,omitempty"`

	// The HTTP status code applicable to this problem.
	Status uint   `json:"status"`
	Title  string `json:"title"`
}

// Non-standard meta-information that can not be represented as an attribute or relationship.
type Error_Meta struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Errors []Error `json:"errors"`
}

// PageRef defines model for PageRef.
type PageRef interface{}

// Pagination defines model for Pagination.
type Pagination struct {
	First *PageRef `json:"first,omitempty"`
	Last  *PageRef `json:"last,omitempty"`
	Next  *PageRef `json:"next,omitempty"`
	Prev  *PageRef `json:"prev,omitempty"`
}

// Fields defines model for fields.
type Fields map[string]interface{}

// Include defines model for include.
type Include string

// Page defines model for page.
type Page struct {
	// The numbers of items to return
	Limit *uint `json:"limit,omitempty"`

	// A page number within the paginated result set.
	Number *uint `json:"number,omitempty"`

	// The number of items to skip before starting to collect the result set
	Offset *uint `json:"offset,omitempty"`

	// Number of results to return per page.
	Size *uint `json:"size,omitempty"`
}

// Sort defines model for sort.
type Sort string

// BadRequestError defines model for BadRequestError.
type BadRequestError ErrorResponse

// NotFoundError defines model for NotFoundError.
type NotFoundError ErrorResponse

// RateLimitError defines model for RateLimitError.
type RateLimitError ErrorResponse

// UnauthorizedError defines model for UnauthorizedError.
type UnauthorizedError ErrorResponse

// Getter for additional properties for Error_Meta. Returns the specified
// element and whether it was found
func (a Error_Meta) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Meta
func (a *Error_Meta) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Meta to handle AdditionalProperties
func (a *Error_Meta) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Meta to handle AdditionalProperties
func (a Error_Meta) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
