// Package process provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package process

import (
	"encoding/json"
	"fmt"
	"time"

	externalRef1 "github.com/lejenome/lro/pkg/apis/common"
)

// Defines values for ProcessState.
const (
	ProcessStateCOMPLETED ProcessState = "COMPLETED"

	ProcessStateSCHEDULED ProcessState = "SCHEDULED"

	ProcessStateSTARTED ProcessState = "STARTED"
)

// Defines values for ProcessStatus.
const (
	ProcessStatusCANCEL ProcessStatus = "CANCEL"

	ProcessStatusFAILURE ProcessStatus = "FAILURE"

	ProcessStatusPENDING ProcessStatus = "PENDING"

	ProcessStatusRUNNING ProcessStatus = "RUNNING"

	ProcessStatusSUCCESS ProcessStatus = "SUCCESS"

	ProcessStatusTIMEOUT ProcessStatus = "TIMEOUT"
)

// Process unique ID (UUID)
type JobId string

// JobShortInfo defines model for JobShortInfo.
type JobShortInfo struct {
	// Process unique ID (UUID)
	Id        *JobId  `json:"id,omitempty"`
	StatusURL *string `json:"statusURL,omitempty"`
}

// Process details and input/output format schema
type ProcessInfo struct {
	Input  *ProcessInput  `json:"input,omitempty"`
	Name   *ProcessName   `json:"name,omitempty"`
	Output *ProcessOutput `json:"output"`
}

// ProcessInput defines model for ProcessInput.
type ProcessInput struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ProcessName defines model for ProcessName.
type ProcessName string

// ProcessOutput defines model for ProcessOutput.
type ProcessOutput struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ProcessResultsResponse defines model for ProcessResultsResponse.
type ProcessResultsResponse struct {
	Data   *ProcessOutput        `json:"data"`
	Errors *[]externalRef1.Error `json:"errors"`
	Id     string                `json:"id"`
	Meta   *struct {
		CreatedAt time.Time     `json:"createdAt"`
		EndedAt   time.Time     `json:"endedAt"`
		Name      ProcessName   `json:"name"`
		Owner     string        `json:"owner"`
		StartedAt time.Time     `json:"startedAt"`
		State     ProcessState  `json:"state"`
		Status    ProcessStatus `json:"status"`
		UpdatedAt time.Time     `json:"updatedAt"`
	} `json:"meta"`
}

// ProcessState defines model for ProcessState.
type ProcessState string

// ProcessStatus defines model for ProcessStatus.
type ProcessStatus string

// ProcessStatusResponse defines model for ProcessStatusResponse.
type ProcessStatusResponse struct {
	CreatedAt  time.Time     `json:"createdAt"`
	EndedAt    *time.Time    `json:"endedAt"`
	Id         string        `json:"id"`
	Name       ProcessName   `json:"name"`
	Owner      string        `json:"owner"`
	Progress   uint8         `json:"progress"`
	ResultsUrl *string       `json:"resultsUrl"`
	StartedAt  *time.Time    `json:"startedAt"`
	State      ProcessState  `json:"state"`
	Status     ProcessStatus `json:"status"`
	UpdatedAt  time.Time     `json:"updatedAt"`
}

// TriggerProcessRequest defines model for TriggerProcessRequest.
type TriggerProcessRequest struct {
	Config *struct {
		Priority   *uint8  `json:"priority,omitempty"`
		Retry      *uint8  `json:"retry,omitempty"`
		Timeout    *uint32 `json:"timeout,omitempty"`
		WebhookUrl *string `json:"webhookUrl,omitempty"`
	} `json:"config,omitempty"`
	Data        ProcessInput `json:"data"`
	ProcessName *ProcessName `json:"processName,omitempty"`
}

// Getter for additional properties for ProcessInput. Returns the specified
// element and whether it was found
func (a ProcessInput) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProcessInput
func (a *ProcessInput) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProcessInput to handle AdditionalProperties
func (a *ProcessInput) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProcessInput to handle AdditionalProperties
func (a ProcessInput) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProcessOutput. Returns the specified
// element and whether it was found
func (a ProcessOutput) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProcessOutput
func (a *ProcessOutput) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProcessOutput to handle AdditionalProperties
func (a *ProcessOutput) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProcessOutput to handle AdditionalProperties
func (a ProcessOutput) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
