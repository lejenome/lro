version: "3.9"
services:
  process-executor:
    image: lro/process-executor:latest
    build:
      context: .
      dockerfile: ./dockerfiles/process-executor/Dockerfile
    deploy:
      replicas: 1
      mode: global
      restart_policy:
        condition: on-failure
    read_only: true
    # volumes:
    #   - type: bind
    #     source: ./test.db
    #     target: /test.db
    configs:
      - source: process-executor
        target: /config.yml
        mode: 0440
    networks:
      - process-services
    depends_on:
      - db
      - nats
      - redis

  process-api:
    image: lro/process-api:latest
    build:
      context: .
      dockerfile: ./dockerfiles/process-api/Dockerfile
    deploy:
      replicas: 1
      mode: global
    #volumes:
    #  - type: bind
    #    source: ./test.db
    #    target: /test.db
    read_only: true
    ports:
      - "8080:8080"
    configs:
      - source: process-api
        target: /config.yml
        mode: 0440
    #configs:
    #  - config.yaml
    #env_file: .env
    networks:
      - process-services
    depends_on:
      - db
      - nats
      - redis
    # network_mode: "host"

  nats:
    build: ./dockerfiles/nats
    image: lro/nats
    deploy:
      restart_policy:
        condition: on-failure
    #ports:
    #  - 4222:4222
    env_file:
      - ./configs/dev/nats.env
    volumes:
      - nats:/nats
    networks:
      - process-services
  db:
    build: ./dockerfiles/db
    image: lro/db
    deploy:
      restart_policy:
        condition: on-failure
    env_file:
      - ./configs/dev/db.env
      - ./configs/dev/grafana.env
      - ./configs/dev/kratos.env
    #ports:
    #  - 5432:5432
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - process-services
  redis:
    build: ./dockerfiles/redis
    image: lro/redis
    deploy:
      restart_policy:
        condition: on-failure
    #ports:
    #  - 6379:6379
    volumes:
      - redis:/data
    networks:
      - process-services

  kratos-migrate:
    build:
      context: ./dockerfiles/kratos
      dockerfile: Dockerfile.migrate
    image: lro/kratos-migrate
    deploy:
      restart_policy:
        condition: on-failure
    env_file:
      - ./configs/dev/kratos.env
    volumes:
      - type: bind
        source: ./dockerfiles/kratos/config
        target: /etc/config/kratos
    networks:
      - process-services
    depends_on:
      - db

  kratos:
    build: ./dockerfiles/kratos
    image: lro/kratos
    deploy:
      restart_policy:
        condition: on-failure
    env_file:
      - ./configs/dev/kratos.env
    ports:
      - '4433:4433' # public
      - '4434:4434' # admin
    volumes:
      - type: bind
        source: ./dockerfiles/kratos/config
        target: /etc/config/kratos
    networks:
      - process-services
    depends_on:
      - db
      - kratos-migrate

  kratos-ui:
    build:
      context: ./dockerfiles/kratos
      dockerfile: Dockerfile.ui
    image: lro/kratos-ui
    deploy:
      restart_policy:
        condition: on-failure
    env_file:
      - ./configs/dev/kratos-ui.env
    ports:
      - '4455:4455'
    networks:
      - process-services
    depends_on:
      - kratos

  grafana:
    build: ./dockerfiles/grafana
    image: lro/grafana
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - 3000:3000
    volumes:
      - grafana:/var/lib/grafana
      - ./dockerfiles/grafana/provisioning:/etc/grafana/provisioning/dashboards
      - ./dockerfiles/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./dockerfiles/grafana/dashboards:/var/lib/grafana/dashboards
    env_file:
      - ./configs/dev/grafana.env
    logging:
      driver: none
    networks:
      - process-services
    depends_on:
      - loki
      - db

  loki:
    build: ./dockerfiles/loki
    image: lro/loki
    command: -config.file=/etc/loki/config.yaml
    deploy:
      restart_policy:
        condition: on-failure
    #env_file:
    #  - ./configs/dev/loki.env
    configs:
      - source: loki
        target: /etc/loki/config.yaml
        mode: 0440
    volumes:
      - loki:/loki
    networks:
      - process-services

  promtail:
    build: ./dockerfiles/promtail
    image: lro/promtail
    command: -config.file=/etc/promtail/config.yml
    deploy:
      restart_policy:
        condition: on-failure
    env_file:
      - ./configs/dev/promtail.env
    configs:
      - source: promtail
        target: /etc/promtail/config.yml
        mode: 0440
    networks:
      - process-services
    volumes:
      - promtail:/tmp/promtail
      - /var/lib/docker/containers:/var/lib/docker/containers
    depends_on:
      - loki

  prometheus:
    build: ./dockerfiles/prometheus
    image: lro/prometheus
    deploy:
      restart_policy:
        condition: on-failure
    configs:
      - source: prometheus
        target: /etc/prometheus/prometheus.yml
        mode: 0440
    logging:
      driver: none
    networks:
      - process-services

  jaeger:
    build: ./dockerfiles/jaeger
    image: lro/jaeger
    ports:
      - "16686:16686" # The UI port
    networks:
      - process-services

networks:
  process-services:
volumes:
  db:
  nats:
  redis:
  grafana:
  promtail:
  loki:
configs:
  process-executor:
    file: ./configs/dev/process-executor.yml
  process-api:
    file: ./configs/dev/process-api.yml
  prometheus:
    file: ./dockerfiles/prometheus/prometheus.yml
  loki:
    file: ./dockerfiles/loki/loki.yml
  promtail:
    file: ./dockerfiles/promtail/promtail.yml
